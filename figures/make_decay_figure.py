# -*- coding: utf-8 -*-
"""
figures/make_decay_figure.py  •  CRI v0.1‑SIM
-------------------------------------------------------------
Generate the exponential‑decay figure (ln A_pre vs. τ_f) used in
Supplementary Section S5 and the main manuscript.

All data are synthetic, read from CSV files generated by
decay/simulate_decay.py.

Usage
-----
    python make_decay_figure.py
"""

import os
import yaml
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import inset_axes

# ── Matplotlib style ─────────────────────────────────────────────────────────
mpl.rcParams.update({
    "font.family":      "Arial",
    "font.size":        8,
    "axes.linewidth":   0.5,   # ≈0.25 pt after reduction
    "lines.linewidth":  0.75,
    "legend.fontsize":  6,
    "xtick.labelsize":  6,
    "ytick.labelsize":  6,
})
# ─────────────────────────────────────────────────────────────────────────────

def load_params(path):
    """Load decay parameters from YAML."""
    with open(path, "r", encoding="utf-8") as f:
        cfg = yaml.safe_load(f)
    return cfg["decay"]

def main():
    # ── paths ────────────────────────────────────────────────────────────────
    here      = os.path.dirname(__file__)
    repo      = os.path.abspath(os.path.join(here, os.pardir))
    decay_dir = os.path.join(repo, "decay")
    out_dir   = os.path.join(here, "output")
    os.makedirs(out_dir, exist_ok=True)

    # ── load synthetic data ─────────────────────────────────────────────────
    params   = load_params(os.path.join(decay_dir, "default_params.yml"))
    noise    = params["noise_log"]          # ± noise band (log‑space)
    df_pts   = pd.read_csv(os.path.join(decay_dir, "output", "decay_data.csv"))
    df_curve = pd.read_csv(os.path.join(decay_dir, "output", "decay_curve.csv"))

    # ── figure canvas (88 mm wide, 6:4 aspect) ──────────────────────────────
    width_mm  = 88
    height_mm = width_mm / 1.5
    fig, ax   = plt.subplots(figsize=(width_mm / 25.4, height_mm / 25.4))

    # ── main panel : ln A_pre vs τ_f ─────────────────────────────────────────
    ax.plot(
        df_curve["delta_cont"],   # keep column name; just relabel
        df_curve["lnA_pre_cont"],
        label=r"$\ln A_{\mathrm{pre}}(\tau_f)$",
    )
    ax.fill_between(
        df_curve["delta_cont"],
        df_curve["lnA_pre_cont"] - noise,
        df_curve["lnA_pre_cont"] + noise,
        alpha=0.20,
        label=rf"$\pm{noise:.2f}$",
    )
    ax.errorbar(
        df_pts["delta"], df_pts["lnA_pre"],
        yerr=noise, fmt="o", markersize=3,
        label="Sampled delays",
    )

    ax.set_xlabel(r"$\tau_f$ (s)")
    ax.set_ylabel(r"$\ln A_{\mathrm{pre}}(\tau_f)$")
    ax.legend(loc="upper right")

    # ── inset : raw A_pre vs τ_f ────────────────────────────────────────────
    ax_ins = inset_axes(
        ax, width="70%", height="70%",
        loc="lower left",
        bbox_to_anchor=(0.15, 0.17, 0.4, 0.4),
        bbox_transform=ax.transAxes,
    )

    A_pre_cont = params["A0"] * np.exp(-df_curve["delta_cont"] / params["tau_fut"])
    A_pre_pts  = params["A0"] * np.exp(-df_pts["delta"] / params["tau_fut"])
    ax_ins.plot(df_curve["delta_cont"], A_pre_cont, linewidth=0.75)
    ax_ins.scatter(df_pts["delta"], A_pre_pts, s=10)

    ax_ins.set_title(r"Raw $A_{\mathrm{pre}}(\tau_f)$", fontsize=8)
    ax_ins.set_xlabel(r"$\tau_f$ (s)", fontsize=7)
    ax_ins.set_ylabel(r"$A_{\mathrm{pre}}$", fontsize=7)
    ax_ins.tick_params(labelsize=6)

    fig.tight_layout()

    # ── export ──────────────────────────────────────────────────────────────
    pdf_path = os.path.join(out_dir, "CRI_decay_refined_fig.pdf")
    fig.savefig(pdf_path, format="pdf", bbox_inches="tight")
    plt.close(fig)
    print(f"Saved CRI decay figure ➜ {pdf_path}")

if __name__ == "__main__":
    main()
